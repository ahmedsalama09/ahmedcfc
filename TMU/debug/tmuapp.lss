
tmuapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000932  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000203  00800060  00800060  000009a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbd  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000562  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5f  00000000  00000000  00001d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c18  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	22 e0       	ldi	r18, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 97 04 	jmp	0x92e	; 0x92e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_Toggle>:
	}
}

void LED_Toggle(void)
{
	DIO_Toggle(GPIOA,BIT0);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_Toggle>
  84:	08 95       	ret

00000086 <LED_Toli>:
}

void LED_Toli(void)
{
	DIO_Toggle(GPIOA,BIT1);
  86:	62 e0       	ldi	r22, 0x02	; 2
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_Toggle>
  8e:	08 95       	ret

00000090 <main>:
*	Description
** a small application of two toggles one of them is done once"one shot" 
other is done periodicly 
*/
int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	2d 97       	sbiw	r28, 0x0d	; 13
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	DIO_Cfg_s m;
	m.GPIO = GPIOA;
  a4:	19 82       	std	Y+1, r1	; 0x01
	m.dir = OUTPUT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8b 83       	std	Y+3, r24	; 0x03
	m.pins = LOWER_NIBBLE;
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&m);
  ae:	ce 01       	movw	r24, r28
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	0e 94 89 00 	call	0x112	; 0x112 <DIO_init>
	
	st_TMU_init s;
	s.u8_timer_chnl = TMU_TMR_CH0;
  b6:	1c 82       	std	Y+4, r1	; 0x04
	
	/************************************************************************/
	/*			TASKS INITS                                                 */
	/************************************************************************/
	TMU_TaskType p;
	p.u32_counts = MSECONDS_1000;
  b8:	88 ee       	ldi	r24, 0xE8	; 232
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	8f 83       	std	Y+7, r24	; 0x07
  c2:	98 87       	std	Y+8, r25	; 0x08
  c4:	a9 87       	std	Y+9, r26	; 0x09
  c6:	ba 87       	std	Y+10, r27	; 0x0a
	p.task_ptr =LED_Toggle; 
  c8:	8e e3       	ldi	r24, 0x3E	; 62
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9d 87       	std	Y+13, r25	; 0x0d
  ce:	8c 87       	std	Y+12, r24	; 0x0c
	p.u8_id = TASK_ID_1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	8e 83       	std	Y+6, r24	; 0x06
	p.u8_periodic_state = TMU_PERIODIC;
  d4:	8d 83       	std	Y+5, r24	; 0x05
	
	TMU_Init(&s);
  d6:	ce 01       	movw	r24, r28
  d8:	04 96       	adiw	r24, 0x04	; 4
  da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TMU_Init>
	TMU_Start_Timer(&p);
  de:	ce 01       	movw	r24, r28
  e0:	05 96       	adiw	r24, 0x05	; 5
  e2:	0e 94 2f 03 	call	0x65e	; 0x65e <TMU_Start_Timer>
	p.u32_counts = MSECONDS_500;
  e6:	84 ef       	ldi	r24, 0xF4	; 244
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	8f 83       	std	Y+7, r24	; 0x07
  f0:	98 87       	std	Y+8, r25	; 0x08
  f2:	a9 87       	std	Y+9, r26	; 0x09
  f4:	ba 87       	std	Y+10, r27	; 0x0a
	p.task_ptr =LED_Toli;
  f6:	83 e4       	ldi	r24, 0x43	; 67
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	9d 87       	std	Y+13, r25	; 0x0d
  fc:	8c 87       	std	Y+12, r24	; 0x0c
	p.u8_id = TASK_ID_2;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	8e 83       	std	Y+6, r24	; 0x06
	p.u8_periodic_state = TMU_ONESHOOT;
 102:	1d 82       	std	Y+5, r1	; 0x05
	TMU_Start_Timer(&p);
 104:	ce 01       	movw	r24, r28
 106:	05 96       	adiw	r24, 0x05	; 5
 108:	0e 94 2f 03 	call	0x65e	; 0x65e <TMU_Start_Timer>
	
 
    while (1) 
    {
		/*start dispatcher*/
		TMU_Dispatch();
 10c:	0e 94 b7 03 	call	0x76e	; 0x76e <TMU_Dispatch>
		
	}
 110:	fd cf       	rjmp	.-6      	; 0x10c <main+0x7c>

00000112 <DIO_init>:
		break;
	}
	
	/*things worked fine then return E_OK*/
	return error_flag;
}
 112:	fc 01       	movw	r30, r24
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	30 97       	sbiw	r30, 0x00	; 0
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_init+0xa>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	91 30       	cpi	r25, 0x01	; 1
 120:	b1 f0       	breq	.+44     	; 0x14e <DIO_init+0x3c>
 122:	28 f0       	brcs	.+10     	; 0x12e <DIO_init+0x1c>
 124:	92 30       	cpi	r25, 0x02	; 2
 126:	19 f1       	breq	.+70     	; 0x16e <DIO_init+0x5c>
 128:	93 30       	cpi	r25, 0x03	; 3
 12a:	89 f1       	breq	.+98     	; 0x18e <DIO_init+0x7c>
 12c:	40 c0       	rjmp	.+128    	; 0x1ae <DIO_init+0x9c>
 12e:	92 81       	ldd	r25, Z+2	; 0x02
 130:	91 11       	cpse	r25, r1
 132:	06 c0       	rjmp	.+12     	; 0x140 <DIO_init+0x2e>
 134:	2a b3       	in	r18, 0x1a	; 26
 136:	91 81       	ldd	r25, Z+1	; 0x01
 138:	90 95       	com	r25
 13a:	92 23       	and	r25, r18
 13c:	9a bb       	out	0x1a, r25	; 26
 13e:	08 95       	ret
 140:	9f 3f       	cpi	r25, 0xFF	; 255
 142:	b9 f5       	brne	.+110    	; 0x1b2 <DIO_init+0xa0>
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	92 2b       	or	r25, r18
 14a:	9a bb       	out	0x1a, r25	; 26
 14c:	08 95       	ret
 14e:	92 81       	ldd	r25, Z+2	; 0x02
 150:	91 11       	cpse	r25, r1
 152:	06 c0       	rjmp	.+12     	; 0x160 <DIO_init+0x4e>
 154:	27 b3       	in	r18, 0x17	; 23
 156:	91 81       	ldd	r25, Z+1	; 0x01
 158:	90 95       	com	r25
 15a:	92 23       	and	r25, r18
 15c:	97 bb       	out	0x17, r25	; 23
 15e:	08 95       	ret
 160:	9f 3f       	cpi	r25, 0xFF	; 255
 162:	49 f5       	brne	.+82     	; 0x1b6 <DIO_init+0xa4>
 164:	27 b3       	in	r18, 0x17	; 23
 166:	91 81       	ldd	r25, Z+1	; 0x01
 168:	92 2b       	or	r25, r18
 16a:	97 bb       	out	0x17, r25	; 23
 16c:	08 95       	ret
 16e:	92 81       	ldd	r25, Z+2	; 0x02
 170:	91 11       	cpse	r25, r1
 172:	06 c0       	rjmp	.+12     	; 0x180 <DIO_init+0x6e>
 174:	24 b3       	in	r18, 0x14	; 20
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	90 95       	com	r25
 17a:	92 23       	and	r25, r18
 17c:	94 bb       	out	0x14, r25	; 20
 17e:	08 95       	ret
 180:	9f 3f       	cpi	r25, 0xFF	; 255
 182:	d9 f4       	brne	.+54     	; 0x1ba <DIO_init+0xa8>
 184:	24 b3       	in	r18, 0x14	; 20
 186:	91 81       	ldd	r25, Z+1	; 0x01
 188:	92 2b       	or	r25, r18
 18a:	94 bb       	out	0x14, r25	; 20
 18c:	08 95       	ret
 18e:	92 81       	ldd	r25, Z+2	; 0x02
 190:	91 11       	cpse	r25, r1
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <DIO_init+0x8e>
 194:	21 b3       	in	r18, 0x11	; 17
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	90 95       	com	r25
 19a:	92 23       	and	r25, r18
 19c:	91 bb       	out	0x11, r25	; 17
 19e:	08 95       	ret
 1a0:	9f 3f       	cpi	r25, 0xFF	; 255
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_init+0xac>
 1a4:	21 b3       	in	r18, 0x11	; 17
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	92 2b       	or	r25, r18
 1aa:	91 bb       	out	0x11, r25	; 17
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <DIO_Toggle>:
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
	
	/*check for the GPIO*/
	switch(GPIO){
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	59 f0       	breq	.+22     	; 0x1dc <DIO_Toggle+0x1a>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <DIO_Toggle+0x10>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <DIO_Toggle+0x24>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	81 f0       	breq	.+32     	; 0x1f0 <DIO_Toggle+0x2e>
 1d0:	14 c0       	rjmp	.+40     	; 0x1fa <DIO_Toggle+0x38>
		
		case GPIOA:
		
			/*toggle the selected pins of port a */
			PORTA_DATA ^= pins;
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	68 27       	eor	r22, r24
 1d6:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
		case GPIOA:
		
			/*toggle the selected pins of port a */
			PORTA_DATA ^= pins;
			
		break;
 1da:	08 95       	ret
		
		case GPIOB:
		
			/*toggle the selected pins of port b*/
			PORTB_DATA ^= pins;
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	68 27       	eor	r22, r24
 1e0:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
		case GPIOB:
		
			/*toggle the selected pins of port b*/
			PORTB_DATA ^= pins;
			
		break;
 1e4:	08 95       	ret
		
		case GPIOC:
		
			/*toggle the selected pins of port c*/
			PORTC_DATA ^= pins;
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	68 27       	eor	r22, r24
 1ea:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
		case GPIOC:
		
			/*toggle the selected pins of port c*/
			PORTC_DATA ^= pins;
			
		break;
 1ee:	08 95       	ret
		
		case GPIOD:
		
			/*toggle the selected pin of port d*/
			PORTD_DATA ^= pins;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	68 27       	eor	r22, r24
 1f4:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
		case GPIOD:
		
			/*toggle the selected pin of port d*/
			PORTD_DATA ^= pins;
			
		break;
 1f8:	08 95       	ret
		
		default:
			
			/*wrong port entered then return not ok*/
			error_flag = E_NOK;	
 1fa:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/*return OK as it worked fine by reaching that point*/
	return error_flag;
 1fc:	08 95       	ret

000001fe <Timer_Init>:
		break;
		}
		
		/*return error state*/
		return error_flag;
}
 1fe:	fc 01       	movw	r30, r24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	30 97       	sbiw	r30, 0x00	; 0
 204:	09 f4       	brne	.+2      	; 0x208 <Timer_Init+0xa>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 81       	ld	r25, Z
 20a:	91 30       	cpi	r25, 0x01	; 1
 20c:	a1 f1       	breq	.+104    	; 0x276 <Timer_Init+0x78>
 20e:	20 f0       	brcs	.+8      	; 0x218 <Timer_Init+0x1a>
 210:	92 30       	cpi	r25, 0x02	; 2
 212:	09 f4       	brne	.+2      	; 0x216 <Timer_Init+0x18>
 214:	59 c0       	rjmp	.+178    	; 0x2c8 <Timer_Init+0xca>
 216:	70 c0       	rjmp	.+224    	; 0x2f8 <Timer_Init+0xfa>
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	92 30       	cpi	r25, 0x02	; 2
 21c:	39 f4       	brne	.+14     	; 0x22c <Timer_Init+0x2e>
 21e:	93 b7       	in	r25, 0x33	; 51
 220:	92 60       	ori	r25, 0x02	; 2
 222:	93 bf       	out	0x33, r25	; 51
 224:	93 b7       	in	r25, 0x33	; 51
 226:	94 60       	ori	r25, 0x04	; 4
 228:	93 bf       	out	0x33, r25	; 51
 22a:	11 c0       	rjmp	.+34     	; 0x24e <Timer_Init+0x50>
 22c:	91 30       	cpi	r25, 0x01	; 1
 22e:	51 f4       	brne	.+20     	; 0x244 <Timer_Init+0x46>
 230:	93 b7       	in	r25, 0x33	; 51
 232:	91 60       	ori	r25, 0x01	; 1
 234:	93 bf       	out	0x33, r25	; 51
 236:	93 b7       	in	r25, 0x33	; 51
 238:	94 60       	ori	r25, 0x04	; 4
 23a:	93 bf       	out	0x33, r25	; 51
 23c:	93 b7       	in	r25, 0x33	; 51
 23e:	92 60       	ori	r25, 0x02	; 2
 240:	93 bf       	out	0x33, r25	; 51
 242:	05 c0       	rjmp	.+10     	; 0x24e <Timer_Init+0x50>
 244:	91 11       	cpse	r25, r1
 246:	03 c0       	rjmp	.+6      	; 0x24e <Timer_Init+0x50>
 248:	93 81       	ldd	r25, Z+3	; 0x03
 24a:	90 93 64 00 	sts	0x0064, r25
 24e:	92 81       	ldd	r25, Z+2	; 0x02
 250:	91 30       	cpi	r25, 0x01	; 1
 252:	59 f4       	brne	.+22     	; 0x26a <Timer_Init+0x6c>
 254:	99 b7       	in	r25, 0x39	; 57
 256:	91 60       	ori	r25, 0x01	; 1
 258:	99 bf       	out	0x39, r25	; 57
 25a:	24 81       	ldd	r18, Z+4	; 0x04
 25c:	35 81       	ldd	r19, Z+5	; 0x05
 25e:	30 93 61 00 	sts	0x0061, r19
 262:	20 93 60 00 	sts	0x0060, r18
 266:	78 94       	sei
 268:	08 95       	ret
 26a:	91 11       	cpse	r25, r1
 26c:	48 c0       	rjmp	.+144    	; 0x2fe <Timer_Init+0x100>
 26e:	99 b7       	in	r25, 0x39	; 57
 270:	9e 7f       	andi	r25, 0xFE	; 254
 272:	99 bf       	out	0x39, r25	; 57
 274:	08 95       	ret
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	92 30       	cpi	r25, 0x02	; 2
 27a:	39 f4       	brne	.+14     	; 0x28a <Timer_Init+0x8c>
 27c:	9e b5       	in	r25, 0x2e	; 46
 27e:	92 60       	ori	r25, 0x02	; 2
 280:	9e bd       	out	0x2e, r25	; 46
 282:	9e b5       	in	r25, 0x2e	; 46
 284:	91 60       	ori	r25, 0x01	; 1
 286:	9e bd       	out	0x2e, r25	; 46
 288:	11 c0       	rjmp	.+34     	; 0x2ac <Timer_Init+0xae>
 28a:	91 30       	cpi	r25, 0x01	; 1
 28c:	51 f4       	brne	.+20     	; 0x2a2 <Timer_Init+0xa4>
 28e:	93 b7       	in	r25, 0x33	; 51
 290:	91 60       	ori	r25, 0x01	; 1
 292:	93 bf       	out	0x33, r25	; 51
 294:	93 b7       	in	r25, 0x33	; 51
 296:	94 60       	ori	r25, 0x04	; 4
 298:	93 bf       	out	0x33, r25	; 51
 29a:	93 b7       	in	r25, 0x33	; 51
 29c:	92 60       	ori	r25, 0x02	; 2
 29e:	93 bf       	out	0x33, r25	; 51
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <Timer_Init+0xae>
 2a2:	91 11       	cpse	r25, r1
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <Timer_Init+0xae>
 2a6:	93 81       	ldd	r25, Z+3	; 0x03
 2a8:	90 93 63 00 	sts	0x0063, r25
 2ac:	92 81       	ldd	r25, Z+2	; 0x02
 2ae:	91 30       	cpi	r25, 0x01	; 1
 2b0:	29 f4       	brne	.+10     	; 0x2bc <Timer_Init+0xbe>
 2b2:	99 b7       	in	r25, 0x39	; 57
 2b4:	93 7c       	andi	r25, 0xC3	; 195
 2b6:	94 60       	ori	r25, 0x04	; 4
 2b8:	99 bf       	out	0x39, r25	; 57
 2ba:	08 95       	ret
 2bc:	91 11       	cpse	r25, r1
 2be:	1f c0       	rjmp	.+62     	; 0x2fe <Timer_Init+0x100>
 2c0:	99 b7       	in	r25, 0x39	; 57
 2c2:	93 7c       	andi	r25, 0xC3	; 195
 2c4:	99 bf       	out	0x39, r25	; 57
 2c6:	08 95       	ret
 2c8:	91 81       	ldd	r25, Z+1	; 0x01
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	29 0f       	add	r18, r25
 2ce:	22 30       	cpi	r18, 0x02	; 2
 2d0:	a8 f0       	brcs	.+42     	; 0x2fc <Timer_Init+0xfe>
 2d2:	91 11       	cpse	r25, r1
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <Timer_Init+0xde>
 2d6:	93 81       	ldd	r25, Z+3	; 0x03
 2d8:	90 93 62 00 	sts	0x0062, r25
 2dc:	92 81       	ldd	r25, Z+2	; 0x02
 2de:	91 30       	cpi	r25, 0x01	; 1
 2e0:	29 f4       	brne	.+10     	; 0x2ec <Timer_Init+0xee>
 2e2:	99 b7       	in	r25, 0x39	; 57
 2e4:	9f 73       	andi	r25, 0x3F	; 63
 2e6:	90 64       	ori	r25, 0x40	; 64
 2e8:	99 bf       	out	0x39, r25	; 57
 2ea:	08 95       	ret
 2ec:	91 11       	cpse	r25, r1
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <Timer_Init+0x100>
 2f0:	99 b7       	in	r25, 0x39	; 57
 2f2:	9f 73       	andi	r25, 0x3F	; 63
 2f4:	99 bf       	out	0x39, r25	; 57
 2f6:	08 95       	ret
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret

00000300 <Timer_Start>:
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	09 f4       	brne	.+2      	; 0x306 <Timer_Start+0x6>
 304:	5a c0       	rjmp	.+180    	; 0x3ba <Timer_Start+0xba>
 306:	20 f0       	brcs	.+8      	; 0x310 <Timer_Start+0x10>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	09 f4       	brne	.+2      	; 0x30e <Timer_Start+0xe>
 30c:	a5 c0       	rjmp	.+330    	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 30e:	f5 c0       	rjmp	.+490    	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
 310:	80 91 64 00 	lds	r24, 0x0064
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	21 f1       	breq	.+72     	; 0x360 <Timer_Start+0x60>
 318:	28 f4       	brcc	.+10     	; 0x324 <Timer_Start+0x24>
 31a:	88 23       	and	r24, r24
 31c:	59 f0       	breq	.+22     	; 0x334 <Timer_Start+0x34>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	a1 f0       	breq	.+40     	; 0x34a <Timer_Start+0x4a>
 322:	47 c0       	rjmp	.+142    	; 0x3b2 <Timer_Start+0xb2>
 324:	86 30       	cpi	r24, 0x06	; 6
 326:	79 f1       	breq	.+94     	; 0x386 <Timer_Start+0x86>
 328:	87 30       	cpi	r24, 0x07	; 7
 32a:	c1 f1       	breq	.+112    	; 0x39c <Timer_Start+0x9c>
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	09 f0       	breq	.+2      	; 0x332 <Timer_Start+0x32>
 330:	40 c0       	rjmp	.+128    	; 0x3b2 <Timer_Start+0xb2>
 332:	1e c0       	rjmp	.+60     	; 0x370 <Timer_Start+0x70>
 334:	83 b7       	in	r24, 0x33	; 51
 336:	8e 7f       	andi	r24, 0xFE	; 254
 338:	83 bf       	out	0x33, r24	; 51
 33a:	83 b7       	in	r24, 0x33	; 51
 33c:	8d 7f       	andi	r24, 0xFD	; 253
 33e:	83 bf       	out	0x33, r24	; 51
 340:	83 b7       	in	r24, 0x33	; 51
 342:	8b 7f       	andi	r24, 0xFB	; 251
 344:	83 bf       	out	0x33, r24	; 51
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	35 c0       	rjmp	.+106    	; 0x3b4 <Timer_Start+0xb4>
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	83 bf       	out	0x33, r24	; 51
 350:	83 b7       	in	r24, 0x33	; 51
 352:	8b 7f       	andi	r24, 0xFB	; 251
 354:	83 bf       	out	0x33, r24	; 51
 356:	83 b7       	in	r24, 0x33	; 51
 358:	8d 7f       	andi	r24, 0xFD	; 253
 35a:	83 bf       	out	0x33, r24	; 51
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	2a c0       	rjmp	.+84     	; 0x3b4 <Timer_Start+0xb4>
 360:	83 b7       	in	r24, 0x33	; 51
 362:	82 60       	ori	r24, 0x02	; 2
 364:	83 bf       	out	0x33, r24	; 51
 366:	83 b7       	in	r24, 0x33	; 51
 368:	8b 7f       	andi	r24, 0xFB	; 251
 36a:	83 bf       	out	0x33, r24	; 51
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	22 c0       	rjmp	.+68     	; 0x3b4 <Timer_Start+0xb4>
 370:	83 b7       	in	r24, 0x33	; 51
 372:	82 60       	ori	r24, 0x02	; 2
 374:	83 bf       	out	0x33, r24	; 51
 376:	83 b7       	in	r24, 0x33	; 51
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	83 bf       	out	0x33, r24	; 51
 37c:	83 b7       	in	r24, 0x33	; 51
 37e:	8b 7f       	andi	r24, 0xFB	; 251
 380:	83 bf       	out	0x33, r24	; 51
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	17 c0       	rjmp	.+46     	; 0x3b4 <Timer_Start+0xb4>
 386:	83 b7       	in	r24, 0x33	; 51
 388:	84 60       	ori	r24, 0x04	; 4
 38a:	83 bf       	out	0x33, r24	; 51
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	8d 7f       	andi	r24, 0xFD	; 253
 390:	83 bf       	out	0x33, r24	; 51
 392:	83 b7       	in	r24, 0x33	; 51
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	83 bf       	out	0x33, r24	; 51
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0c c0       	rjmp	.+24     	; 0x3b4 <Timer_Start+0xb4>
 39c:	83 b7       	in	r24, 0x33	; 51
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	83 bf       	out	0x33, r24	; 51
 3a2:	83 b7       	in	r24, 0x33	; 51
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	83 bf       	out	0x33, r24	; 51
 3a8:	83 b7       	in	r24, 0x33	; 51
 3aa:	8d 7f       	andi	r24, 0xFD	; 253
 3ac:	83 bf       	out	0x33, r24	; 51
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <Timer_Start+0xb4>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	60 95       	com	r22
 3b6:	62 bf       	out	0x32, r22	; 50
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <Timer_Start+0xbc>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 91 63 00 	lds	r25, 0x0063
 3c0:	92 30       	cpi	r25, 0x02	; 2
 3c2:	11 f1       	breq	.+68     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 3c4:	28 f4       	brcc	.+10     	; 0x3d0 <Timer_Start+0xd0>
 3c6:	99 23       	and	r25, r25
 3c8:	59 f0       	breq	.+22     	; 0x3e0 <Timer_Start+0xe0>
 3ca:	91 30       	cpi	r25, 0x01	; 1
 3cc:	99 f0       	breq	.+38     	; 0x3f4 <Timer_Start+0xf4>
 3ce:	46 c0       	rjmp	.+140    	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 3d0:	96 30       	cpi	r25, 0x06	; 6
 3d2:	71 f1       	breq	.+92     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
 3d4:	97 30       	cpi	r25, 0x07	; 7
 3d6:	b1 f1       	breq	.+108    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 3d8:	94 30       	cpi	r25, 0x04	; 4
 3da:	09 f0       	breq	.+2      	; 0x3de <Timer_Start+0xde>
 3dc:	3f c0       	rjmp	.+126    	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 3de:	1e c0       	rjmp	.+60     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3e0:	9e b5       	in	r25, 0x2e	; 46
 3e2:	9d 7f       	andi	r25, 0xFD	; 253
 3e4:	9e bd       	out	0x2e, r25	; 46
 3e6:	9e b5       	in	r25, 0x2e	; 46
 3e8:	9e 7f       	andi	r25, 0xFE	; 254
 3ea:	9e bd       	out	0x2e, r25	; 46
 3ec:	9e b5       	in	r25, 0x2e	; 46
 3ee:	9b 7f       	andi	r25, 0xFB	; 251
 3f0:	9e bd       	out	0x2e, r25	; 46
 3f2:	35 c0       	rjmp	.+106    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 3f4:	9e b5       	in	r25, 0x2e	; 46
 3f6:	91 60       	ori	r25, 0x01	; 1
 3f8:	9e bd       	out	0x2e, r25	; 46
 3fa:	9e b5       	in	r25, 0x2e	; 46
 3fc:	9d 7f       	andi	r25, 0xFD	; 253
 3fe:	9e bd       	out	0x2e, r25	; 46
 400:	9e b5       	in	r25, 0x2e	; 46
 402:	9b 7f       	andi	r25, 0xFB	; 251
 404:	9e bd       	out	0x2e, r25	; 46
 406:	2b c0       	rjmp	.+86     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 408:	9e b5       	in	r25, 0x2e	; 46
 40a:	92 60       	ori	r25, 0x02	; 2
 40c:	9e bd       	out	0x2e, r25	; 46
 40e:	9e b5       	in	r25, 0x2e	; 46
 410:	9e 7f       	andi	r25, 0xFE	; 254
 412:	9e bd       	out	0x2e, r25	; 46
 414:	9e b5       	in	r25, 0x2e	; 46
 416:	9b 7f       	andi	r25, 0xFB	; 251
 418:	9e bd       	out	0x2e, r25	; 46
 41a:	21 c0       	rjmp	.+66     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 41c:	9e b5       	in	r25, 0x2e	; 46
 41e:	92 60       	ori	r25, 0x02	; 2
 420:	9e bd       	out	0x2e, r25	; 46
 422:	9e b5       	in	r25, 0x2e	; 46
 424:	91 60       	ori	r25, 0x01	; 1
 426:	9e bd       	out	0x2e, r25	; 46
 428:	9e b5       	in	r25, 0x2e	; 46
 42a:	9b 7f       	andi	r25, 0xFB	; 251
 42c:	9e bd       	out	0x2e, r25	; 46
 42e:	17 c0       	rjmp	.+46     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 430:	9e b5       	in	r25, 0x2e	; 46
 432:	94 60       	ori	r25, 0x04	; 4
 434:	9e bd       	out	0x2e, r25	; 46
 436:	9e b5       	in	r25, 0x2e	; 46
 438:	9e 7f       	andi	r25, 0xFE	; 254
 43a:	9e bd       	out	0x2e, r25	; 46
 43c:	9e b5       	in	r25, 0x2e	; 46
 43e:	9d 7f       	andi	r25, 0xFD	; 253
 440:	9e bd       	out	0x2e, r25	; 46
 442:	0d c0       	rjmp	.+26     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 444:	9e b5       	in	r25, 0x2e	; 46
 446:	94 60       	ori	r25, 0x04	; 4
 448:	9e bd       	out	0x2e, r25	; 46
 44a:	9e b5       	in	r25, 0x2e	; 46
 44c:	91 60       	ori	r25, 0x01	; 1
 44e:	9e bd       	out	0x2e, r25	; 46
 450:	9e b5       	in	r25, 0x2e	; 46
 452:	9d 7f       	andi	r25, 0xFD	; 253
 454:	9e bd       	out	0x2e, r25	; 46
 456:	03 c0       	rjmp	.+6      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	01 c0       	rjmp	.+2      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 91 62 00 	lds	r25, 0x0062
 462:	92 30       	cpi	r25, 0x02	; 2
 464:	11 f1       	breq	.+68     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 466:	28 f4       	brcc	.+10     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 468:	99 23       	and	r25, r25
 46a:	59 f0       	breq	.+22     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 46c:	91 30       	cpi	r25, 0x01	; 1
 46e:	99 f0       	breq	.+38     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 470:	46 c0       	rjmp	.+140    	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
 472:	96 30       	cpi	r25, 0x06	; 6
 474:	71 f1       	breq	.+92     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 476:	97 30       	cpi	r25, 0x07	; 7
 478:	b1 f1       	breq	.+108    	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
 47a:	94 30       	cpi	r25, 0x04	; 4
 47c:	09 f0       	breq	.+2      	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
 47e:	3f c0       	rjmp	.+126    	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
 480:	1e c0       	rjmp	.+60     	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
 482:	95 b5       	in	r25, 0x25	; 37
 484:	9e 7f       	andi	r25, 0xFE	; 254
 486:	95 bd       	out	0x25, r25	; 37
 488:	95 b5       	in	r25, 0x25	; 37
 48a:	9b 7f       	andi	r25, 0xFB	; 251
 48c:	95 bd       	out	0x25, r25	; 37
 48e:	95 b5       	in	r25, 0x25	; 37
 490:	9d 7f       	andi	r25, 0xFD	; 253
 492:	95 bd       	out	0x25, r25	; 37
 494:	08 95       	ret
 496:	9e b5       	in	r25, 0x2e	; 46
 498:	91 60       	ori	r25, 0x01	; 1
 49a:	9e bd       	out	0x2e, r25	; 46
 49c:	9e b5       	in	r25, 0x2e	; 46
 49e:	9b 7f       	andi	r25, 0xFB	; 251
 4a0:	9e bd       	out	0x2e, r25	; 46
 4a2:	9e b5       	in	r25, 0x2e	; 46
 4a4:	9d 7f       	andi	r25, 0xFD	; 253
 4a6:	9e bd       	out	0x2e, r25	; 46
 4a8:	08 95       	ret
 4aa:	9e b5       	in	r25, 0x2e	; 46
 4ac:	92 60       	ori	r25, 0x02	; 2
 4ae:	9e bd       	out	0x2e, r25	; 46
 4b0:	9e b5       	in	r25, 0x2e	; 46
 4b2:	9b 7f       	andi	r25, 0xFB	; 251
 4b4:	9e bd       	out	0x2e, r25	; 46
 4b6:	9e b5       	in	r25, 0x2e	; 46
 4b8:	9e 7f       	andi	r25, 0xFE	; 254
 4ba:	9e bd       	out	0x2e, r25	; 46
 4bc:	08 95       	ret
 4be:	9e b5       	in	r25, 0x2e	; 46
 4c0:	91 60       	ori	r25, 0x01	; 1
 4c2:	9e bd       	out	0x2e, r25	; 46
 4c4:	9e b5       	in	r25, 0x2e	; 46
 4c6:	92 60       	ori	r25, 0x02	; 2
 4c8:	9e bd       	out	0x2e, r25	; 46
 4ca:	9e b5       	in	r25, 0x2e	; 46
 4cc:	9b 7f       	andi	r25, 0xFB	; 251
 4ce:	9e bd       	out	0x2e, r25	; 46
 4d0:	08 95       	ret
 4d2:	9e b5       	in	r25, 0x2e	; 46
 4d4:	94 60       	ori	r25, 0x04	; 4
 4d6:	9e bd       	out	0x2e, r25	; 46
 4d8:	9e b5       	in	r25, 0x2e	; 46
 4da:	9e 7f       	andi	r25, 0xFE	; 254
 4dc:	9e bd       	out	0x2e, r25	; 46
 4de:	9e b5       	in	r25, 0x2e	; 46
 4e0:	9d 7f       	andi	r25, 0xFD	; 253
 4e2:	9e bd       	out	0x2e, r25	; 46
 4e4:	08 95       	ret
 4e6:	9e b5       	in	r25, 0x2e	; 46
 4e8:	94 60       	ori	r25, 0x04	; 4
 4ea:	9e bd       	out	0x2e, r25	; 46
 4ec:	9e b5       	in	r25, 0x2e	; 46
 4ee:	91 60       	ori	r25, 0x01	; 1
 4f0:	9e bd       	out	0x2e, r25	; 46
 4f2:	9e b5       	in	r25, 0x2e	; 46
 4f4:	9d 7f       	andi	r25, 0xFD	; 253
 4f6:	9e bd       	out	0x2e, r25	; 46
 4f8:	08 95       	ret
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret

00000502 <Timer_SetValue>:
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
	
	/*switch for the channel you want to read it's Val "0/1/2" only*/
	switch(u8_Timer_CH_NO){
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	39 f0       	breq	.+14     	; 0x514 <Timer_SetValue+0x12>
 506:	18 f0       	brcs	.+6      	; 0x50e <Timer_SetValue+0xc>
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	41 f0       	breq	.+16     	; 0x51c <Timer_SetValue+0x1a>
 50c:	0a c0       	rjmp	.+20     	; 0x522 <Timer_SetValue+0x20>
		
		case TIMER_CH0:
		
		   /*read TCNT Value of TMR0 which is 8bits only wide*/
		   TCNT0 = (uint8_t)u16_Data ;
 50e:	62 bf       	out	0x32, r22	; 50


ERROR_STATUS Timer_SetValue(uint8_t u8_Timer_CH_NO,uint16_t u16_Data){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 510:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH0:
		
		   /*read TCNT Value of TMR0 which is 8bits only wide*/
		   TCNT0 = (uint8_t)u16_Data ;
		   
		   break;
 512:	08 95       	ret
		   
		case TIMER_CH1:
		
		   /*read TCNT Value of TMR1 which is 16 bit wide*/
		   (TCNT1) =u16_Data;
 514:	7d bd       	out	0x2d, r23	; 45
 516:	6c bd       	out	0x2c, r22	; 44


ERROR_STATUS Timer_SetValue(uint8_t u8_Timer_CH_NO,uint16_t u16_Data){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 518:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH1:
		
		   /*read TCNT Value of TMR1 which is 16 bit wide*/
		   (TCNT1) =u16_Data;
		   
		   break;
 51a:	08 95       	ret
		   
		case TIMER_CH2:
		
		   /*read TCNT Value of TMR2 Which is 16bit wide*/
		    (TCNT2) =u16_Data;
 51c:	64 bd       	out	0x24, r22	; 36


ERROR_STATUS Timer_SetValue(uint8_t u8_Timer_CH_NO,uint16_t u16_Data){
	
	/*create error flag*/
	ERROR_STATUS error_flag = E_OK;
 51e:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH2:
		
		   /*read TCNT Value of TMR2 Which is 16bit wide*/
		    (TCNT2) =u16_Data;
		   
		   break;
 520:	08 95       	ret
		   
		default:
		   
		   /*not correct channel entered so return not ok*/
		   error_flag = E_NOK;
 522:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}

	/*return error flag*/
	return error_flag;
}	
 524:	08 95       	ret

00000526 <__vector_11>:

ISR(TIMER0_OVF_irq)
{
 526:	78 94       	sei
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
	ptr_callback();
 54a:	e0 91 60 00 	lds	r30, 0x0060
 54e:	f0 91 61 00 	lds	r31, 0x0061
 552:	09 95       	icall
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <Timer_callback>:

/*callback function for the timer interrupt*/
static void Timer_callback(void){
	
	/*set the flag high to indicated 1 milli second received*/
	Flag_1ms = HIGH;
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	80 93 6c 00 	sts	0x006C, r24
	
	/*increase cnt by 1*/
	u32_cnts++;
 57c:	80 91 67 00 	lds	r24, 0x0067
 580:	90 91 68 00 	lds	r25, 0x0068
 584:	a0 91 69 00 	lds	r26, 0x0069
 588:	b0 91 6a 00 	lds	r27, 0x006A
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	a1 1d       	adc	r26, r1
 590:	b1 1d       	adc	r27, r1
 592:	80 93 67 00 	sts	0x0067, r24
 596:	90 93 68 00 	sts	0x0068, r25
 59a:	a0 93 69 00 	sts	0x0069, r26
 59e:	b0 93 6a 00 	sts	0x006A, r27
	
	/*reinit timer value*/
	Timer_SetValue(TMU_TMR_CH0,TCNT_VAL);
 5a2:	68 e0       	ldi	r22, 0x08	; 8
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 81 02 	call	0x502	; 0x502 <Timer_SetValue>
 5ac:	08 95       	ret

000005ae <TMU_Init>:
*return "error_state* : -1 : for NULL POINTER
						-2 : for multiple initialization
						
*/
ERROR_STATUS TMU_Init(st_TMU_init *ConfigPtr)
{
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <TMU_Init+0x8>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <TMU_Init+0xa>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <TMU_Init+0xc>
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
	/*create Error_flag*/
	ERROR_STATUS error_flag = NO_ERROR;
	
	/*check if the module with inited before*/
	if(ModuleInit_State == MODULE_INIT){
 5be:	20 91 66 00 	lds	r18, 0x0066
 5c2:	21 30       	cpi	r18, 0x01	; 1
 5c4:	f1 f1       	breq	.+124    	; 0x642 <TMU_Init+0x94>
		error_flag = ERROR_MULTIPLE_MODULE_INIT;
	}
	
	else{
		/*save that module is inited*/
		ModuleInit_State = MODULE_INIT;
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	20 93 66 00 	sts	0x0066, r18
		
		/*check for null pointer as it's not valid*/
		if(ConfigPtr == NULL)
 5cc:	00 97       	sbiw	r24, 0x00	; 0
 5ce:	d9 f1       	breq	.+118    	; 0x646 <TMU_Init+0x98>
		{
			/*create timer structure*/
			Timer_cfg_s st_timer_cfg;
	
			/*check which channel user wants*/
			switch(ConfigPtr->u8_timer_chnl){
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	91 f0       	breq	.+36     	; 0x5fc <TMU_Init+0x4e>
 5d8:	18 f0       	brcs	.+6      	; 0x5e0 <TMU_Init+0x32>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	e9 f0       	breq	.+58     	; 0x618 <TMU_Init+0x6a>
 5de:	2b c0       	rjmp	.+86     	; 0x636 <TMU_Init+0x88>
		
				case TMU_TMR_CH0:
			
					/*configure TM0*/
					/*first save the selected timer*/
					TMR_ch = TIMER_CH0;
 5e0:	10 92 6d 00 	sts	0x006D, r1
					st_timer_cfg.Timer_CH_NO = TIMER_CH0;
 5e4:	19 82       	std	Y+1, r1	; 0x01
					st_timer_cfg.Timer_INT_Mode = TIMER_INTERRUPT_MODE;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	8b 83       	std	Y+3, r24	; 0x03
					st_timer_cfg.Timer_Mode = TIMER_MODE;
 5ea:	1a 82       	std	Y+2, r1	; 0x02
					st_timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64;
 5ec:	84 e0       	ldi	r24, 0x04	; 4
 5ee:	8c 83       	std	Y+4, r24	; 0x04
					st_timer_cfg.Timer_Cbk_ptr = Timer_callback;
 5f0:	8b eb       	ldi	r24, 0xBB	; 187
 5f2:	92 e0       	ldi	r25, 0x02	; 2
 5f4:	9e 83       	std	Y+6, r25	; 0x06
 5f6:	8d 83       	std	Y+5, r24	; 0x05
						
*/
ERROR_STATUS TMU_Init(st_TMU_init *ConfigPtr)
{
	/*create Error_flag*/
	ERROR_STATUS error_flag = NO_ERROR;
 5f8:	10 e0       	ldi	r17, 0x00	; 0
					st_timer_cfg.Timer_INT_Mode = TIMER_INTERRUPT_MODE;
					st_timer_cfg.Timer_Mode = TIMER_MODE;
					st_timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64;
					st_timer_cfg.Timer_Cbk_ptr = Timer_callback;
			
				break;
 5fa:	1e c0       	rjmp	.+60     	; 0x638 <TMU_Init+0x8a>
		
				case TMU_TMR_CH1:
		
					/*configure TM1*/
					/*first save the selected timer*/
					TMR_ch = TIMER_CH1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 6d 00 	sts	0x006D, r24
					st_timer_cfg.Timer_CH_NO = TIMER_CH1;
 602:	89 83       	std	Y+1, r24	; 0x01
					st_timer_cfg.Timer_INT_Mode = TIMER_INTERRUPT_MODE;
 604:	8b 83       	std	Y+3, r24	; 0x03
					st_timer_cfg.Timer_Mode = TIMER_MODE;
 606:	1a 82       	std	Y+2, r1	; 0x02
					st_timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64;
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	8c 83       	std	Y+4, r24	; 0x04
					st_timer_cfg.Timer_Cbk_ptr = Timer_callback;
 60c:	8b eb       	ldi	r24, 0xBB	; 187
 60e:	92 e0       	ldi	r25, 0x02	; 2
 610:	9e 83       	std	Y+6, r25	; 0x06
 612:	8d 83       	std	Y+5, r24	; 0x05
						
*/
ERROR_STATUS TMU_Init(st_TMU_init *ConfigPtr)
{
	/*create Error_flag*/
	ERROR_STATUS error_flag = NO_ERROR;
 614:	10 e0       	ldi	r17, 0x00	; 0
					st_timer_cfg.Timer_CH_NO = TIMER_CH1;
					st_timer_cfg.Timer_INT_Mode = TIMER_INTERRUPT_MODE;
					st_timer_cfg.Timer_Mode = TIMER_MODE;
					st_timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64;
					st_timer_cfg.Timer_Cbk_ptr = Timer_callback;
				break;
 616:	10 c0       	rjmp	.+32     	; 0x638 <TMU_Init+0x8a>
		
				case TMU_TMR_CH2:
			
					/*configure TM2*/
					/*first save the selected timer*/
					TMR_ch = TIMER_CH2;
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	80 93 6d 00 	sts	0x006D, r24
					st_timer_cfg.Timer_CH_NO = TIMER_CH2;
 61e:	89 83       	std	Y+1, r24	; 0x01
					st_timer_cfg.Timer_INT_Mode = TIMER_INTERRUPT_MODE;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	8b 83       	std	Y+3, r24	; 0x03
					st_timer_cfg.Timer_Mode = TIMER_MODE;
 624:	1a 82       	std	Y+2, r1	; 0x02
					st_timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64;
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	8c 83       	std	Y+4, r24	; 0x04
					st_timer_cfg.Timer_Cbk_ptr = Timer_callback;
 62a:	8b eb       	ldi	r24, 0xBB	; 187
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	9e 83       	std	Y+6, r25	; 0x06
 630:	8d 83       	std	Y+5, r24	; 0x05
						
*/
ERROR_STATUS TMU_Init(st_TMU_init *ConfigPtr)
{
	/*create Error_flag*/
	ERROR_STATUS error_flag = NO_ERROR;
 632:	10 e0       	ldi	r17, 0x00	; 0
					st_timer_cfg.Timer_CH_NO = TIMER_CH2;
					st_timer_cfg.Timer_INT_Mode = TIMER_INTERRUPT_MODE;
					st_timer_cfg.Timer_Mode = TIMER_MODE;
					st_timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64;
					st_timer_cfg.Timer_Cbk_ptr = Timer_callback;
				break;
 634:	01 c0       	rjmp	.+2      	; 0x638 <TMU_Init+0x8a>
				
				default:
					error_flag = INVALID_INIT_PARAMETER;
 636:	1d ef       	ldi	r17, 0xFD	; 253
				break;
			}
			
		/*init timer with previous settings*/
		Timer_Init(&st_timer_cfg);
 638:	ce 01       	movw	r24, r28
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Timer_Init>
 640:	03 c0       	rjmp	.+6      	; 0x648 <TMU_Init+0x9a>
	
	/*check if the module with inited before*/
	if(ModuleInit_State == MODULE_INIT){
		
		/*record an error status*/
		error_flag = ERROR_MULTIPLE_MODULE_INIT;
 642:	1e ef       	ldi	r17, 0xFE	; 254
 644:	01 c0       	rjmp	.+2      	; 0x648 <TMU_Init+0x9a>
		
		/*check for null pointer as it's not valid*/
		if(ConfigPtr == NULL)
		{
			/*record error status*/
			error_flag = ERROR_NULL_PTR_INIT;
 646:	1f ef       	ldi	r17, 0xFF	; 255
		}

	}
/*return error_status*/
return error_flag;
}
 648:	81 2f       	mov	r24, r17
 64a:	26 96       	adiw	r28, 0x06	; 6
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	08 95       	ret

0000065e <TMU_Start_Timer>:
** INPUTS  : pointer to struct of TMU_Task @ which 1- task id 2-task counts 3- task state
4-task callback pointer
*Return : Error state
*/
ERROR_STATUS TMU_Start_Timer(TMU_TaskType *Tmu_start)
{
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	dc 01       	movw	r26, r24
	
	/*create inner loop to check the id*/
	uint8_t id_loop=0;
	
	/*check if null pointer then not valid*/
	if(Tmu_start == NULL)
 664:	89 2b       	or	r24, r25
 666:	09 f4       	brne	.+2      	; 0x66a <TMU_Start_Timer+0xc>
 668:	7e c0       	rjmp	.+252    	; 0x766 <TMU_Start_Timer+0x108>
		error_flag = ERROR_NULL_PTR_START;
	}
	
	else{
		/*check if the id was inserted before*/
		for(id_loop = 0; id_loop<u8_TaskNumber; id_loop ++){
 66a:	50 91 a0 00 	lds	r21, 0x00A0
 66e:	55 23       	and	r21, r21
 670:	01 f1       	breq	.+64     	; 0x6b2 <TMU_Start_Timer+0x54>
			
			if(Timer_tasks[id_loop].u8_id  == Tmu_start->u8_id)
 672:	11 96       	adiw	r26, 0x01	; 1
 674:	4c 91       	ld	r20, X
 676:	11 97       	sbiw	r26, 0x01	; 1
 678:	e2 ea       	ldi	r30, 0xA2	; 162
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	2f ef       	ldi	r18, 0xFF	; 255
 67e:	25 0f       	add	r18, r21
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	c9 01       	movw	r24, r18
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	28 0f       	add	r18, r24
 692:	39 1f       	adc	r19, r25
 694:	25 55       	subi	r18, 0x55	; 85
 696:	3f 4f       	sbci	r19, 0xFF	; 255
 698:	80 e0       	ldi	r24, 0x00	; 0
			{
				/*save error state*/
				error_flag = ERROR_MULTIPLE_MODULE_START;
 69a:	6b ef       	ldi	r22, 0xFB	; 251
	
	else{
		/*check if the id was inserted before*/
		for(id_loop = 0; id_loop<u8_TaskNumber; id_loop ++){
			
			if(Timer_tasks[id_loop].u8_id  == Tmu_start->u8_id)
 69c:	90 81       	ld	r25, Z
 69e:	94 13       	cpse	r25, r20
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <TMU_Start_Timer+0x46>
			{
				/*save error state*/
				error_flag = ERROR_MULTIPLE_MODULE_START;
 6a2:	86 2f       	mov	r24, r22
 6a4:	39 96       	adiw	r30, 0x09	; 9
		error_flag = ERROR_NULL_PTR_START;
	}
	
	else{
		/*check if the id was inserted before*/
		for(id_loop = 0; id_loop<u8_TaskNumber; id_loop ++){
 6a6:	e2 17       	cp	r30, r18
 6a8:	f3 07       	cpc	r31, r19
 6aa:	c1 f7       	brne	.-16     	; 0x69c <TMU_Start_Timer+0x3e>
				error_flag = ERROR_MULTIPLE_MODULE_START;
			}
		}
		
		/*init only if it's the first time for module*/
		if(error_flag != ERROR_MULTIPLE_MODULE_START)
 6ac:	8b 3f       	cpi	r24, 0xFB	; 251
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <TMU_Start_Timer+0x56>
 6b0:	5b c0       	rjmp	.+182    	; 0x768 <TMU_Start_Timer+0x10a>
		error_flag = ERROR_NULL_PTR_START;
	}
	
	else{
		/*check if the id was inserted before*/
		for(id_loop = 0; id_loop<u8_TaskNumber; id_loop ++){
 6b2:	80 e0       	ldi	r24, 0x00	; 0
		
		/*init only if it's the first time for module*/
		if(error_flag != ERROR_MULTIPLE_MODULE_START)
		{
			
			if(u8_Deleted_Tasks_Counter != ZERO ){
 6b4:	e0 91 6b 00 	lds	r30, 0x006B
 6b8:	ee 23       	and	r30, r30
 6ba:	61 f1       	breq	.+88     	; 0x714 <TMU_Start_Timer+0xb6>
				
				/*decrement the counter by one*/
				u8_Deleted_Tasks_Counter--;
 6bc:	e1 50       	subi	r30, 0x01	; 1
 6be:	e0 93 6b 00 	sts	0x006B, r30
			
				/*allocate your data at the last free buffer*/
				Timer_tasks[u8_DeletedElements[u8_Deleted_Tasks_Counter]].u8_id = Tmu_start->u8_id;;
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	e2 59       	subi	r30, 0x92	; 146
 6c6:	ff 4f       	sbci	r31, 0xFF	; 255
 6c8:	20 81       	ld	r18, Z
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	11 96       	adiw	r26, 0x01	; 1
 6ce:	9c 91       	ld	r25, X
 6d0:	11 97       	sbiw	r26, 0x01	; 1
 6d2:	f9 01       	movw	r30, r18
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	e2 0f       	add	r30, r18
 6e2:	f3 1f       	adc	r31, r19
 6e4:	ef 55       	subi	r30, 0x5F	; 95
 6e6:	ff 4f       	sbci	r31, 0xFF	; 255
 6e8:	91 83       	std	Z+1, r25	; 0x01
				Timer_tasks[u8_DeletedElements[u8_Deleted_Tasks_Counter]].u32_counts = Tmu_start->u32_counts;
 6ea:	12 96       	adiw	r26, 0x02	; 2
 6ec:	4d 91       	ld	r20, X+
 6ee:	5d 91       	ld	r21, X+
 6f0:	6d 91       	ld	r22, X+
 6f2:	7c 91       	ld	r23, X
 6f4:	15 97       	sbiw	r26, 0x05	; 5
 6f6:	42 83       	std	Z+2, r20	; 0x02
 6f8:	53 83       	std	Z+3, r21	; 0x03
 6fa:	64 83       	std	Z+4, r22	; 0x04
 6fc:	75 83       	std	Z+5, r23	; 0x05
				Timer_tasks[u8_DeletedElements[u8_Deleted_Tasks_Counter]].u8_periodic_state = Tmu_start->u8_periodic_state;
 6fe:	9c 91       	ld	r25, X
 700:	90 83       	st	Z, r25
				Timer_tasks[u8_DeletedElements[u8_Deleted_Tasks_Counter]].task_ptr = Tmu_start->task_ptr;
 702:	17 96       	adiw	r26, 0x07	; 7
 704:	2d 91       	ld	r18, X+
 706:	3c 91       	ld	r19, X
 708:	18 97       	sbiw	r26, 0x08	; 8
 70a:	30 87       	std	Z+8, r19	; 0x08
 70c:	27 83       	std	Z+7, r18	; 0x07
				Timer_tasks[u8_DeletedElements[u8_Deleted_Tasks_Counter]].u8_TaskState = TASK_STATE_NOTDONE;
 70e:	92 e0       	ldi	r25, 0x02	; 2
 710:	96 83       	std	Z+6, r25	; 0x06
 712:	2a c0       	rjmp	.+84     	; 0x768 <TMU_Start_Timer+0x10a>
			}
			else{
			
				/*allocate your data at the first free buffer*/
				Timer_tasks[u8_TaskNumber].u8_id = Tmu_start->u8_id;
 714:	25 2f       	mov	r18, r21
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	11 96       	adiw	r26, 0x01	; 1
 71a:	9c 91       	ld	r25, X
 71c:	11 97       	sbiw	r26, 0x01	; 1
 71e:	f9 01       	movw	r30, r18
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	ee 0f       	add	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	e2 0f       	add	r30, r18
 72e:	f3 1f       	adc	r31, r19
 730:	ef 55       	subi	r30, 0x5F	; 95
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	91 83       	std	Z+1, r25	; 0x01
				Timer_tasks[u8_TaskNumber].u32_counts = Tmu_start->u32_counts;
 736:	12 96       	adiw	r26, 0x02	; 2
 738:	0d 91       	ld	r16, X+
 73a:	1d 91       	ld	r17, X+
 73c:	2d 91       	ld	r18, X+
 73e:	3c 91       	ld	r19, X
 740:	15 97       	sbiw	r26, 0x05	; 5
 742:	02 83       	std	Z+2, r16	; 0x02
 744:	13 83       	std	Z+3, r17	; 0x03
 746:	24 83       	std	Z+4, r18	; 0x04
 748:	35 83       	std	Z+5, r19	; 0x05
				Timer_tasks[u8_TaskNumber].u8_periodic_state = Tmu_start->u8_periodic_state;
 74a:	9c 91       	ld	r25, X
 74c:	90 83       	st	Z, r25
				Timer_tasks[u8_TaskNumber].task_ptr = Tmu_start->task_ptr;
 74e:	17 96       	adiw	r26, 0x07	; 7
 750:	2d 91       	ld	r18, X+
 752:	3c 91       	ld	r19, X
 754:	18 97       	sbiw	r26, 0x08	; 8
 756:	30 87       	std	Z+8, r19	; 0x08
 758:	27 83       	std	Z+7, r18	; 0x07
				Timer_tasks[u8_TaskNumber].u8_TaskState = TASK_STATE_NOTDONE;
 75a:	92 e0       	ldi	r25, 0x02	; 2
 75c:	96 83       	std	Z+6, r25	; 0x06
				/*save the counts Val*/
				u8_TaskNumber++;
 75e:	5f 5f       	subi	r21, 0xFF	; 255
 760:	50 93 a0 00 	sts	0x00A0, r21
 764:	01 c0       	rjmp	.+2      	; 0x768 <TMU_Start_Timer+0x10a>
	
	/*check if null pointer then not valid*/
	if(Tmu_start == NULL)
	{
		/*save error state*/
		error_flag = ERROR_NULL_PTR_START;
 766:	8c ef       	ldi	r24, 0xFC	; 252
		}
	}
	
	/*return error state*/
	return error_flag;
}
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <TMU_Dispatch>:
/** TMU_DISPATCH
*Description : Function that starts the timer and trigger the scheduled tasks 
*Input : none
*Output : ERROR STATUS: NO_ERROR , ERROR_NO_TASK if no task is inserted*/
ERROR_STATUS  TMU_Dispatch(void)
{
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
	
	/*create a loop variable*/
	uint8_t u8_loop = ZERO;
	
	/*check if the timer was started before then don't start it again*/
	if(Timer_started == TRUE);
 776:	80 91 65 00 	lds	r24, 0x0065
 77a:	81 30       	cpi	r24, 0x01	; 1
 77c:	49 f0       	breq	.+18     	; 0x790 <TMU_Dispatch+0x22>
	
	else{
		Timer_started = TRUE;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 93 65 00 	sts	0x0065, r24
		Timer_Start(TMR_ch,NUMBER_OF_TICKS);
 784:	67 ef       	ldi	r22, 0xF7	; 247
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	80 91 6d 00 	lds	r24, 0x006D
 78c:	0e 94 80 01 	call	0x300	; 0x300 <Timer_Start>
	}
	
	/*check for the triggers*/
	if(Flag_1ms == HIGH){
 790:	80 91 6c 00 	lds	r24, 0x006C
 794:	8f 3f       	cpi	r24, 0xFF	; 255
 796:	09 f0       	breq	.+2      	; 0x79a <TMU_Dispatch+0x2c>
 798:	94 c0       	rjmp	.+296    	; 0x8c2 <__stack+0x63>
		
		/*reset trigger flag*/
		Flag_1ms = LOW;
 79a:	10 92 6c 00 	sts	0x006C, r1
		
		for(u8_loop=ZERO ;u8_loop<u8_TaskNumber;u8_loop++){	
 79e:	80 91 a0 00 	lds	r24, 0x00A0
 7a2:	88 23       	and	r24, r24
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <TMU_Dispatch+0x3a>
 7a6:	97 c0       	rjmp	.+302    	; 0x8d6 <__stack+0x77>
 7a8:	10 e0       	ldi	r17, 0x00	; 0
			/*for 1 shot only task check if it's the first time then fire it if not then neglect it*/
			if(Timer_tasks[u8_loop].u8_periodic_state  == TMU_ONESHOOT &&(u32_cnts % (Timer_tasks[u8_loop].u32_counts)==0) && Timer_tasks[u8_loop].u8_TaskState == TASK_STATE_NOTDONE){
				
				/*call the function*/
				Timer_tasks[u8_loop].task_ptr();
				Timer_tasks[u8_loop].u8_TaskState = TASK_STATE_DONE;
 7aa:	01 e0       	ldi	r16, 0x01	; 1
		Flag_1ms = LOW;
		
		for(u8_loop=ZERO ;u8_loop<u8_TaskNumber;u8_loop++){	
			
			/*for 1 shot only task check if it's the first time then fire it if not then neglect it*/
			if(Timer_tasks[u8_loop].u8_periodic_state  == TMU_ONESHOOT &&(u32_cnts % (Timer_tasks[u8_loop].u32_counts)==0) && Timer_tasks[u8_loop].u8_TaskState == TASK_STATE_NOTDONE){
 7ac:	c1 2f       	mov	r28, r17
 7ae:	d0 e0       	ldi	r29, 0x00	; 0
 7b0:	fe 01       	movw	r30, r28
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	ec 0f       	add	r30, r28
 7c0:	fd 1f       	adc	r31, r29
 7c2:	ef 55       	subi	r30, 0x5F	; 95
 7c4:	ff 4f       	sbci	r31, 0xFF	; 255
 7c6:	80 81       	ld	r24, Z
 7c8:	81 11       	cpse	r24, r1
 7ca:	33 c0       	rjmp	.+102    	; 0x832 <TMU_Dispatch+0xc4>
 7cc:	60 91 67 00 	lds	r22, 0x0067
 7d0:	70 91 68 00 	lds	r23, 0x0068
 7d4:	80 91 69 00 	lds	r24, 0x0069
 7d8:	90 91 6a 00 	lds	r25, 0x006A
 7dc:	fe 01       	movw	r30, r28
 7de:	ee 0f       	add	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	ee 0f       	add	r30, r30
 7e8:	ff 1f       	adc	r31, r31
 7ea:	ec 0f       	add	r30, r28
 7ec:	fd 1f       	adc	r31, r29
 7ee:	ef 55       	subi	r30, 0x5F	; 95
 7f0:	ff 4f       	sbci	r31, 0xFF	; 255
 7f2:	22 81       	ldd	r18, Z+2	; 0x02
 7f4:	33 81       	ldd	r19, Z+3	; 0x03
 7f6:	44 81       	ldd	r20, Z+4	; 0x04
 7f8:	55 81       	ldd	r21, Z+5	; 0x05
 7fa:	0e 94 75 04 	call	0x8ea	; 0x8ea <__udivmodsi4>
 7fe:	67 2b       	or	r22, r23
 800:	68 2b       	or	r22, r24
 802:	69 2b       	or	r22, r25
 804:	09 f0       	breq	.+2      	; 0x808 <TMU_Dispatch+0x9a>
 806:	42 c0       	rjmp	.+132    	; 0x88c <__stack+0x2d>
 808:	fe 01       	movw	r30, r28
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	ee 0f       	add	r30, r30
 810:	ff 1f       	adc	r31, r31
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	ec 0f       	add	r30, r28
 818:	fd 1f       	adc	r31, r29
 81a:	ef 55       	subi	r30, 0x5F	; 95
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	86 81       	ldd	r24, Z+6	; 0x06
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	a1 f5       	brne	.+104    	; 0x88c <__stack+0x2d>
				
				/*call the function*/
				Timer_tasks[u8_loop].task_ptr();
 824:	ef 01       	movw	r28, r30
 826:	07 80       	ldd	r0, Z+7	; 0x07
 828:	f0 85       	ldd	r31, Z+8	; 0x08
 82a:	e0 2d       	mov	r30, r0
 82c:	09 95       	icall
				Timer_tasks[u8_loop].u8_TaskState = TASK_STATE_DONE;
 82e:	0e 83       	std	Y+6, r16	; 0x06
 830:	2d c0       	rjmp	.+90     	; 0x88c <__stack+0x2d>
			}
	
			/*if it's periodic then keep it runing*/
			else if(Timer_tasks[u8_loop].u8_periodic_state == TMU_PERIODIC && (u32_cnts % (Timer_tasks[u8_loop].u32_counts)==0)){
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	59 f5       	brne	.+86     	; 0x88c <__stack+0x2d>
 836:	60 91 67 00 	lds	r22, 0x0067
 83a:	70 91 68 00 	lds	r23, 0x0068
 83e:	80 91 69 00 	lds	r24, 0x0069
 842:	90 91 6a 00 	lds	r25, 0x006A
 846:	fe 01       	movw	r30, r28
 848:	ee 0f       	add	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	ee 0f       	add	r30, r30
 852:	ff 1f       	adc	r31, r31
 854:	ec 0f       	add	r30, r28
 856:	fd 1f       	adc	r31, r29
 858:	ef 55       	subi	r30, 0x5F	; 95
 85a:	ff 4f       	sbci	r31, 0xFF	; 255
 85c:	22 81       	ldd	r18, Z+2	; 0x02
 85e:	33 81       	ldd	r19, Z+3	; 0x03
 860:	44 81       	ldd	r20, Z+4	; 0x04
 862:	55 81       	ldd	r21, Z+5	; 0x05
 864:	0e 94 75 04 	call	0x8ea	; 0x8ea <__udivmodsi4>
 868:	67 2b       	or	r22, r23
 86a:	68 2b       	or	r22, r24
 86c:	69 2b       	or	r22, r25
 86e:	71 f4       	brne	.+28     	; 0x88c <__stack+0x2d>
			
					/*call it*/
					Timer_tasks[u8_loop].task_ptr();
 870:	ce 01       	movw	r24, r28
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	c8 0f       	add	r28, r24
 880:	d9 1f       	adc	r29, r25
 882:	cf 55       	subi	r28, 0x5F	; 95
 884:	df 4f       	sbci	r29, 0xFF	; 255
 886:	ef 81       	ldd	r30, Y+7	; 0x07
 888:	f8 85       	ldd	r31, Y+8	; 0x08
 88a:	09 95       	icall
			}
		
		/*reinit the counter every 40000 msecond*/
		if(u32_cnts == DISPATCH_MAX_TRIGGER)
 88c:	80 91 67 00 	lds	r24, 0x0067
 890:	90 91 68 00 	lds	r25, 0x0068
 894:	a0 91 69 00 	lds	r26, 0x0069
 898:	b0 91 6a 00 	lds	r27, 0x006A
 89c:	80 34       	cpi	r24, 0x40	; 64
 89e:	9c 49       	sbci	r25, 0x9C	; 156
 8a0:	a1 05       	cpc	r26, r1
 8a2:	b1 05       	cpc	r27, r1
 8a4:	41 f4       	brne	.+16     	; 0x8b6 <__stack+0x57>
				u32_cnts = ZERO;
 8a6:	10 92 67 00 	sts	0x0067, r1
 8aa:	10 92 68 00 	sts	0x0068, r1
 8ae:	10 92 69 00 	sts	0x0069, r1
 8b2:	10 92 6a 00 	sts	0x006A, r1
	if(Flag_1ms == HIGH){
		
		/*reset trigger flag*/
		Flag_1ms = LOW;
		
		for(u8_loop=ZERO ;u8_loop<u8_TaskNumber;u8_loop++){	
 8b6:	1f 5f       	subi	r17, 0xFF	; 255
 8b8:	80 91 a0 00 	lds	r24, 0x00A0
 8bc:	18 17       	cp	r17, r24
 8be:	08 f4       	brcc	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	75 cf       	rjmp	.-278    	; 0x7ac <TMU_Dispatch+0x3e>
				u32_cnts = ZERO;
		}
	}
	
	/*check if no tasks available*/
	if(u8_TaskNumber == ZERO || ((u8_TaskNumber - u8_Deleted_Tasks_Counter) == ZERO))
 8c2:	80 91 a0 00 	lds	r24, 0x00A0
 8c6:	88 23       	and	r24, r24
 8c8:	41 f0       	breq	.+16     	; 0x8da <__stack+0x7b>
 8ca:	90 91 6b 00 	lds	r25, 0x006B
 8ce:	89 13       	cpse	r24, r25
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <__stack+0x7f>
		error_flag = ERROR_DISPATCH_NO_TASKS;
 8d2:	89 ef       	ldi	r24, 0xF9	; 249
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <__stack+0x81>
 8d6:	89 ef       	ldi	r24, 0xF9	; 249
 8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <__stack+0x81>
 8da:	89 ef       	ldi	r24, 0xF9	; 249
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__stack+0x81>
*Input : none
*Output : ERROR STATUS: NO_ERROR , ERROR_NO_TASK if no task is inserted*/
ERROR_STATUS  TMU_Dispatch(void)
{
	/*create error flag*/
	ERROR_STATUS error_flag = NO_ERROR;
 8de:	80 e0       	ldi	r24, 0x00	; 0
	/*check if no tasks available*/
	if(u8_TaskNumber == ZERO || ((u8_TaskNumber - u8_Deleted_Tasks_Counter) == ZERO))
		error_flag = ERROR_DISPATCH_NO_TASKS;
	
	return error_flag;
}
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	1f 91       	pop	r17
 8e6:	0f 91       	pop	r16
 8e8:	08 95       	ret

000008ea <__udivmodsi4>:
 8ea:	a1 e2       	ldi	r26, 0x21	; 33
 8ec:	1a 2e       	mov	r1, r26
 8ee:	aa 1b       	sub	r26, r26
 8f0:	bb 1b       	sub	r27, r27
 8f2:	fd 01       	movw	r30, r26
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <__udivmodsi4_ep>

000008f6 <__udivmodsi4_loop>:
 8f6:	aa 1f       	adc	r26, r26
 8f8:	bb 1f       	adc	r27, r27
 8fa:	ee 1f       	adc	r30, r30
 8fc:	ff 1f       	adc	r31, r31
 8fe:	a2 17       	cp	r26, r18
 900:	b3 07       	cpc	r27, r19
 902:	e4 07       	cpc	r30, r20
 904:	f5 07       	cpc	r31, r21
 906:	20 f0       	brcs	.+8      	; 0x910 <__udivmodsi4_ep>
 908:	a2 1b       	sub	r26, r18
 90a:	b3 0b       	sbc	r27, r19
 90c:	e4 0b       	sbc	r30, r20
 90e:	f5 0b       	sbc	r31, r21

00000910 <__udivmodsi4_ep>:
 910:	66 1f       	adc	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	1a 94       	dec	r1
 91a:	69 f7       	brne	.-38     	; 0x8f6 <__udivmodsi4_loop>
 91c:	60 95       	com	r22
 91e:	70 95       	com	r23
 920:	80 95       	com	r24
 922:	90 95       	com	r25
 924:	9b 01       	movw	r18, r22
 926:	ac 01       	movw	r20, r24
 928:	bd 01       	movw	r22, r26
 92a:	cf 01       	movw	r24, r30
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
